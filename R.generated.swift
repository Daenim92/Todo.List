//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `reminder cell`.
    static let reminderCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "reminder cell")
    /// Reuse identifier `todoCell`.
    static let todoCell: Rswift.ReuseIdentifier<TodoListTableCell> = Rswift.ReuseIdentifier(identifier: "todoCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SignUpInViewController
      
      let access = StoryboardViewControllerResource<SignUpInViewController>(identifier: "access")
      let bundle = R.hostingBundle
      let details = StoryboardViewControllerResource<DetailsViewController>(identifier: "details")
      let edit = StoryboardViewControllerResource<EditViewController>(identifier: "edit")
      let list = StoryboardViewControllerResource<TodoListViewController>(identifier: "list")
      let name = "Main"
      let navigation = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "navigation")
      let reminders = StoryboardViewControllerResource<RemindersViewController>(identifier: "reminders")
      
      func access(_: Void = ()) -> SignUpInViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: access)
      }
      
      func details(_: Void = ()) -> DetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: details)
      }
      
      func edit(_: Void = ()) -> EditViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: edit)
      }
      
      func list(_: Void = ()) -> TodoListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: list)
      }
      
      func navigation(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: navigation)
      }
      
      func reminders(_: Void = ()) -> RemindersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: reminders)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().access() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'access' could not be loaded from storyboard 'Main' as 'SignUpInViewController'.") }
        if _R.storyboard.main().details() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'details' could not be loaded from storyboard 'Main' as 'DetailsViewController'.") }
        if _R.storyboard.main().edit() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'edit' could not be loaded from storyboard 'Main' as 'EditViewController'.") }
        if _R.storyboard.main().list() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'list' could not be loaded from storyboard 'Main' as 'TodoListViewController'.") }
        if _R.storyboard.main().navigation() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'navigation' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().reminders() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'reminders' could not be loaded from storyboard 'Main' as 'RemindersViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
